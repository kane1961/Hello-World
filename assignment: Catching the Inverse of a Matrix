## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.

## This function assigns a matrix value in an environment different from the current to keep as cache.

makeCacheMatrix <- function(x = matrix()) {
        MatrixInverse <- NULL
        set <- function(y) {
                x <<- y
                MatrixInverse <<- NULL
        }
        get <- function() x
        setsolve <- function(solve) MatrixInverse <<- solve
        getsolve <- function() MatrixInverse
        list(set = set, get = get,
             setsolve = setsolve,
             getsolve = getsolve)
}

## CacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and matrix has not changed), then the cachesolve should
## retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        MatrixInverse <- x$getsolve()
        if(!is.null(MatrixInverse)) {
                message("getting cached data")
                return(MatrixInverse)
        }
        MatrixData <- x$get()
        MatrixInverse <- solve(MatrixData, ...)
        x$setsolve(MatrixInverse)
        MatrixInverse
}
